//// Debug.h// Flexible DebugLogging class// Julian Pellico/* This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>.  */#ifndef __Debug_H__#define __Debug_H__#include <ostream>#include <iomanip>class Debug{public:	Debug();		bool isEnabled();	void setDebugStream(std::ostream& o);	void setLevel(int level);	void enable();	void disable();	void print(const std::string& str);	void print(int level, const std::string& str);	static Debug& getDefaultInstance();		template <typename T>	Debug& operator <<(const T& t);	Debug& operator <<(std::ostream& (*manip)(std::ostream&));	private:	bool enabled;	std::ostream* logstream;	int level;	static Debug defaultInstance;};inline bool Debug::isEnabled(){	return enabled;}inline void Debug::enable(){	enabled = true;}inline void Debug::disable(){	enabled = false;}template <typename T>Debug& Debug::operator <<(const T& t){	if (enabled) {		*logstream << t;	}	return *this;}#endif